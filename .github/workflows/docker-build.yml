name: Docker Build & Push

on:
  workflow_call:
    outputs:
      build_status:
        description: "Status of the Docker build"
        value: ${{ jobs.build_push.outputs.build_status }}

jobs:
  build_push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      build_status: ${{ steps.failures.outputs.has_failures }}

    steps:
      - name: Checkout code
        id: checkout
        uses: actions/checkout@v4

      - name: Read version from root package.json
        id: version
        run: |
          echo "VERSION=$(jq -r .version package.json)" >> $GITHUB_ENV

      - name: Login to Docker Hub
        id: docker_login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          tags: |
            ${{ vars.DOCKER_REPO }}:latest
            ${{ vars.DOCKER_REPO }}:${{ env.VERSION }}
          cache-from: type=registry,ref=${{ vars.DOCKER_REPO }}:buildcache
          cache-to: type=registry,ref=${{ vars.DOCKER_REPO }}:buildcache,mode=max

      - name: Detect Failures
        id: failures
        if: always()
        run: |
          has_failures=false
          if [ "${{ steps.checkout.outcome }}" != "success" ]; then has_failures=true; fi
          if [ "${{ steps.version.outcome }}" != "success" ]; then has_failures=true; fi
          if [ "${{ steps.docker_login.outcome }}" != "success" ]; then has_failures=true; fi
          if [ "${{ steps.buildx.outcome }}" != "success" ]; then has_failures=true; fi
          if [ "${{ steps.docker_build.outcome }}" != "success" ]; then has_failures=true; fi
          echo "has_failures=$has_failures" >> $GITHUB_OUTPUT
