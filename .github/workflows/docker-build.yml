name: Docker Build & Push

on:
  workflow_call:
    outputs:
      build_status:
        description: "Status of the Docker build"
        value: ${{ jobs.build_push.outputs.build_status }}

jobs:
  build_push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      build_status: ${{ steps.build_status.outputs.status }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read version from root package.json
        id: version
        run: |
          echo "VERSION=$(jq -r .version package.json)" >> $GITHUB_ENV

      - name: Login to Docker Hub
        id: docker_login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3.10.0

      - name: Build and Push
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          tags: |
            ${{ vars.DOCKER_REPO }}:latest
            ${{ vars.DOCKER_REPO }}:${{ env.VERSION }}
          cache-from: type=registry,ref=${{ vars.DOCKER_REPO }}:buildcache
          cache-to: type=registry,ref=${{ vars.DOCKER_REPO }}:buildcache,mode=max

      - name: Summarize Docker Failures
        uses: actions/github-script@v7
        id: build_status
        if: always()
        with:
          script: |
            const stepsContext = ${{ toJSON(steps) }};
            const failures = [];
            if (stepsContext.docker_login && stepsContext.docker_login.outcome !== 'success') {
              failures.push('Docker Login');}
            if (stepsContext.buildx && stepsContext.buildx.outcome !== 'success') {
              failures.push('Buildx Setup');}
            if (stepsContext.docker_build && stepsContext.docker_build.outcome !== 'success') {
              failures.push('Docker Build');}
            if (failures.length > 0) {
              core.setOutput('status', failures.join(', '));
            } else {
              core.setOutput('status', 'success');
            }